<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bond.Attributes</name>
    </assembly>
    <members>
        <member name="T:Bond.Tag.wstring">
            <summary>
            Represents wstring Bond schema type
            </summary>
        </member>
        <member name="T:Bond.Tag.blob">
            <summary>
            Represents blob Bond schema type
            </summary>
        </member>
        <member name="T:Bond.Tag.nullable`1">
            <summary>
            Represents nullable&lt;T> Bond schema type
            </summary>
        </member>
        <member name="T:Bond.Tag.bonded`1">
            <summary>
            Represents bonded&lt;T> Bond schema type
            </summary>
        </member>
        <member name="T:Bond.Tag.structT">
            <summary>
            Represents a type parameter constrained to value types
            </summary>
        </member>
        <member name="T:Bond.Tag.classT">
            <summary>
            Represents unconstrained type parameter
            </summary>
        </member>
        <member name="T:Bond.SchemaAttribute">
            <summary>
            Specifies that a type represents Bond schema
            </summary>
        </member>
        <member name="T:Bond.NamespaceAttribute">
            <summary>
            Specifies namespace of the schema, required only if different than C# namespace of the class
            </summary>
        </member>
        <member name="T:Bond.IdAttribute">
            <summary>
            Specifies field identifier. Required for all Bond fields
            </summary>
        </member>
        <member name="T:Bond.TypeAttribute">
            <summary>
            Specifies type of a field in Bond schema 
            </summary>
            <remarks>
            If absent the type is inferred from C# type using the following rules:
            - numeric types map in the obvious way
            - IList, ICollection -> BT_LIST
            - IDictionary -> BT_MAP
            - ISet -> BT_SET
            - string -> BT_STRING (Utf8)
            - Bond struct fields initialized to null map to nullable
            - other fields initialized to null map to default of nothing
            The Type attribute is necessary in the following cases:
            - nullable types, e.g. Type[typeof(list&lt;nullable&lt;string>>)]
            - Utf16 string (BT_WSTRING), e.g. Type[typeof(wstring)]
            - user specified type aliases
            </remarks>
        </member>
        <member name="T:Bond.DefaultAttribute">
            <summary>
            Specifies the default value of a field
            </summary>
        </member>
        <member name="T:Bond.RequiredAttribute">
            <summary>
            Specifies that a field is required
            </summary>
        </member>
        <member name="T:Bond.RequiredOptionalAttribute">
            <summary>
            Specifies that a field is required_optional
            </summary>
        </member>
        <member name="T:Bond.AttributeAttribute">
            <summary>
            Specifies user defined schema attribute
            </summary>
        </member>
        <member name="T:Bond.ParserAttribute">
            <summary>
            Applied to protocol readers to indicate the IParser implementation used for parsing the protocol
            </summary>
        </member>
        <member name="T:Bond.ReaderAttribute">
            <summary>
            Applied to protocol writers to indicate the reader type for the protocol
            </summary>
        </member>
        <member name="T:Bond.SerializerAttribute">
            <summary>
            Applied to protocol writers to indicate the implementation of ISerializerGenerator used to generate serializer
            </summary>
        </member>
        <member name="T:Bond.FirstPassWriterAttribute">
            <summary>
            Applied to 2-pass protocol writers to indicate the implementation of IProtocolWriter used to generate the first-pass serializer
            </summary>
        </member>
    </members>
</doc>
